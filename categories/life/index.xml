<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>life on RCGuo&#39;s LogBook</title>
    <link>https://rcguo.github.io/categories/life/</link>
    <description>Recent content in life on RCGuo&#39;s LogBook</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 11 May 2020 00:20:20 +0800</lastBuildDate><atom:link href="https://rcguo.github.io/categories/life/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>寫部落格與分享</title>
      <link>https://rcguo.github.io/posts/2020/my_first_hugo_blog/</link>
      <pubDate>Mon, 11 May 2020 00:20:20 +0800</pubDate>
      
      <guid>https://rcguo.github.io/posts/2020/my_first_hugo_blog/</guid>
      <description>做為一名軟體工程師，工作也有幾年的時間了，一直都有紀錄和分享的想法，心裡卻擔心要分享的東西是不是太簡單了，或是不夠高大尚，老實說是我多慮了，對於現代人來說:
 網路其實是人腦的延伸
 寫程式寫到一半上網查個指令或程式碼片段，對工程師來說是家常便飯，你覺得簡單的東西人可能不覺得簡單。將知識消化的過程記錄下來，給了自己能回溯學習的機會，也給了其他人參考學習的來源。
相信每個人一定都有一個最熟悉的「主」語言，雖然說語言只是完成事情的工具，但是隨著程式語言不斷演進和開發需求的不同，懂得越多意味著擁有更多選擇，能用不同方式來解決同樣的問題。
 如果你只有槌子，看甚麼都像釘子
 因此，持續學習不同程式語言或新知識對於工程師來說就是一項必備的能力，但不要以為看懂了就能記起來，除非你是記憶力的人，否則其實大部分人都需要時常複習和練習，才能把知識變成是自己的東西。
做筆記 雖然市面上有許多種筆記軟體可供選擇，個人還是習慣使用文字檔寫個 Markdown 存在雲端，依照語言或項目做分類。當然，選擇自己慣用的方法即可。
 筆記整理得多了，有時候也能幫助別人
 例如，對某項技術比較生疏的同事，我就可以用15分鐘整理一份簡略版筆記讓他上手;想在小組內達成某個技術上的共識，也可以做一份簡報在小組會議的時候做分享。
能夠教別人才是真的懂 常常發現自己縱使做了筆記，也實作了一些成果出來，但當要跟別人說明時卻又說不出個所以然、吚吚啊阿講不到核心重點，事實上是因為自己也不是很懂。
 撰寫文章也是「刻意練習」的一種方式
 撰寫文章是最簡單的刻意練習方式，但和作筆記不同。撰寫文章會刻意的將得到的知識重複檢視並加以消化，這個過程往往可以發現自己誤解或不甚了解之處。透過不斷重複這些步驟: 學習 -&amp;gt; 筆記 -&amp;gt; 組織成文章，記錄的資訊量愈大，我們就愈能理解自己關注的領域。</description>
    </item>
    
  </channel>
</rss>
