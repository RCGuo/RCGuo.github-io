[{"content":"開發的時候曾經遇到一個情況，需要在 shell 執行程式時將 stderr 導向 console，但是不能顯示stdout 的訊息，且必須同時 stderr 和 stdout 記錄到 log 檔案。\n文件描述符 (file descriptor) 在 UNIX/Linux 系統中，是使用非負整數(0, 1, 2, \u0026hellip;)來表示文件描述符(file descriptor, fd)，用於標示系統中打開的文件和資源。 系統預設打開 0 (stdin), 1 (stdout), 2 (stderr)，也是我們平常常用到的描述符。\n接下來會將需求實作出來，並舉幾個例子以及需要注意的地方:\n 藉由ls一個不存在的檔案來測試，並將 stderr 訊息導向 error.log，我們cat檔案可以看到錯誤訊息:ls: cannot access foo.txt: No such file or directory。  ls foo.txt 2\u0026gt;error.log  將 stderr 導向 stdout，指令中 \u0026amp;(ampersand)符號是告訴shell我們把 fd 2 導向 fd 1 這個fd而不是一個檔案名稱。 在linux下，一切皆檔案，所以系統背後所做的事情是將 fd 1 複製給 fd 2。  ls foo.txt 2\u0026gt;\u0026amp;1  以下的指令先將 stdout 導向 error.log，所以之後 2\u0026gt;\u0026amp;1 重導向會將錯誤訊息寫入 syslog.log 中。 (一般1\u0026gt;syslog.log會省略1寫成＞error.log)  ls foo.txt 1\u0026gt;syslog.log 2\u0026gt;\u0026amp;1  這個指令和剛剛指令很像，要特別注意的是，有些人可能會理解成 「先把 stderr 導向 stdout，後面再把 stdout 導向 error.log，所以 stderr 和 stdout 都會寫入 syslog.log」。  ls foo.txt 2\u0026gt;\u0026amp;1 1\u0026gt;syslog.log 實際上則是 fd 2 複製原本的 fd 1 指向它目前指向的位置也就是 console ，之後 fd 1 會被導向到 syslog.log ，但 fd 2 所複製的副本不受影響，所以錯誤訊息會被印到 console ，stdout 會被存入檔案。\nTee 到這裡已經實作出需求的一半了，但是錯誤訊息尚未被存入檔案，這時候我們可以用 tee 將某個指令的標準輸出，導向、存入某個檔案中。\nls -l的輸出被導向 tee，並且複製到檔案 file.txt 以及下一個命令\n(圖片來源: https://zh.wikipedia.org/wiki/Tee)\n 可以看到 stderr 輸出到 console 並用管線將 console 內容傳給 tee 存入檔案。因此該指令也就能達成我們原本的需求。  ls foo.txt 2\u0026gt;\u0026amp;1 1\u0026gt;syslog.log | tee syslog.log Reference  Ampersands and File Descriptors in Bash 鳥哥的 Linux 私房菜 Wiki - tee  ","permalink":"https://github.com/RCGuo/RCGuo.github-io/posts/2020/linux_shell_redirect_stderr_stdout/","summary":"開發的時候曾經遇到一個情況，需要在 shell 執行程式時將 stderr 導向 console，但是不能顯示stdout 的訊息，且必須同時 stderr 和 stdout 記錄到 log 檔案。\n文件描述符 (file descriptor) 在 UNIX/Linux 系統中，是使用非負整數(0, 1, 2, \u0026hellip;)來表示文件描述符(file descriptor, fd)，用於標示系統中打開的文件和資源。 系統預設打開 0 (stdin), 1 (stdout), 2 (stderr)，也是我們平常常用到的描述符。\n接下來會將需求實作出來，並舉幾個例子以及需要注意的地方:\n 藉由ls一個不存在的檔案來測試，並將 stderr 訊息導向 error.log，我們cat檔案可以看到錯誤訊息:ls: cannot access foo.txt: No such file or directory。  ls foo.txt 2\u0026gt;error.log  將 stderr 導向 stdout，指令中 \u0026amp;(ampersand)符號是告訴shell我們把 fd 2 導向 fd 1 這個fd而不是一個檔案名稱。 在linux下，一切皆檔案，所以系統背後所做的事情是將 fd 1 複製給 fd 2。  ls foo.txt 2\u0026gt;\u0026amp;1  以下的指令先將 stdout 導向 error.","title":"Linux Shell 重新導向: 將標準錯誤(stderr)輸出到螢幕和檔案"},{"content":"做為一名軟體工程師，工作也有幾年的時間了，一直都有紀錄和分享的想法，心裡卻擔心要分享的東西是不是太簡單了，或是不夠高大尚，老實說是我多慮了，對於現代人來說:\n 網路其實是人腦的延伸\n 寫程式寫到一半上網查個指令或程式碼片段，對工程師來說是家常便飯，你覺得簡單的東西人可能不覺得簡單。將知識消化的過程記錄下來，給了自己能回溯學習的機會，也給了其他人參考學習的來源。\n相信每個人一定都有一個最熟悉的「主」語言，雖然說語言只是完成事情的工具，但是隨著程式語言不斷演進和開發需求的不同，懂得越多意味著擁有更多選擇，能用不同方式來解決同樣的問題。\n 如果你只有槌子，看甚麼都像釘子\n 因此，持續學習不同程式語言或新知識對於工程師來說就是一項必備的能力，但不要以為看懂了就能記起來，除非你是記憶力的人，否則其實大部分人都需要時常複習和練習，才能把知識變成是自己的東西。\n做筆記 雖然市面上有許多種筆記軟體可供選擇，個人還是習慣使用文字檔寫個 Markdown 存在雲端，依照語言或項目做分類。當然，選擇自己慣用的方法即可。\n 筆記整理得多了，有時候也能幫助別人\n 例如，對某項技術比較生疏的同事，我就可以用15分鐘整理一份簡略版筆記讓他上手;想在小組內達成某個技術上的共識，也可以做一份簡報在小組會議的時候做分享。\n能夠教別人才是真的懂 常常發現自己縱使做了筆記，也實作了一些成果出來，但當要跟別人說明時卻又說不出個所以然、吚吚啊阿講不到核心重點，事實上是因為自己也不是很懂。\n 撰寫文章也是「刻意練習」的一種方式\n 撰寫文章是最簡單的刻意練習方式，但和作筆記不同。撰寫文章會刻意的將得到的知識重複檢視並加以消化，這個過程往往可以發現自己誤解或不甚了解之處。透過不斷重複這些步驟: 學習 -\u0026gt; 筆記 -\u0026gt; 組織成文章，記錄的資訊量愈大，我們就愈能理解自己關注的領域。\n","permalink":"https://github.com/RCGuo/RCGuo.github-io/posts/2020/my_first_hugo_blog/","summary":"做為一名軟體工程師，工作也有幾年的時間了，一直都有紀錄和分享的想法，心裡卻擔心要分享的東西是不是太簡單了，或是不夠高大尚，老實說是我多慮了，對於現代人來說:\n 網路其實是人腦的延伸\n 寫程式寫到一半上網查個指令或程式碼片段，對工程師來說是家常便飯，你覺得簡單的東西人可能不覺得簡單。將知識消化的過程記錄下來，給了自己能回溯學習的機會，也給了其他人參考學習的來源。\n相信每個人一定都有一個最熟悉的「主」語言，雖然說語言只是完成事情的工具，但是隨著程式語言不斷演進和開發需求的不同，懂得越多意味著擁有更多選擇，能用不同方式來解決同樣的問題。\n 如果你只有槌子，看甚麼都像釘子\n 因此，持續學習不同程式語言或新知識對於工程師來說就是一項必備的能力，但不要以為看懂了就能記起來，除非你是記憶力的人，否則其實大部分人都需要時常複習和練習，才能把知識變成是自己的東西。\n做筆記 雖然市面上有許多種筆記軟體可供選擇，個人還是習慣使用文字檔寫個 Markdown 存在雲端，依照語言或項目做分類。當然，選擇自己慣用的方法即可。\n 筆記整理得多了，有時候也能幫助別人\n 例如，對某項技術比較生疏的同事，我就可以用15分鐘整理一份簡略版筆記讓他上手;想在小組內達成某個技術上的共識，也可以做一份簡報在小組會議的時候做分享。\n能夠教別人才是真的懂 常常發現自己縱使做了筆記，也實作了一些成果出來，但當要跟別人說明時卻又說不出個所以然、吚吚啊阿講不到核心重點，事實上是因為自己也不是很懂。\n 撰寫文章也是「刻意練習」的一種方式\n 撰寫文章是最簡單的刻意練習方式，但和作筆記不同。撰寫文章會刻意的將得到的知識重複檢視並加以消化，這個過程往往可以發現自己誤解或不甚了解之處。透過不斷重複這些步驟: 學習 -\u0026gt; 筆記 -\u0026gt; 組織成文章，記錄的資訊量愈大，我們就愈能理解自己關注的領域。","title":"寫部落格與分享"},{"content":"\r\r 在這個部落格裡，我會寫一些與程式語言、軟體架構和Web開發相關的技術筆記，以及我想分享的任何其他內容。歡迎來到這裡讀一兩篇文章並給點寶貴的意見!\n-RCGuo\n   ","permalink":"https://github.com/RCGuo/RCGuo.github-io/about/","summary":"about","title":"About"}]